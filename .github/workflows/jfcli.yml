
name: "JF-CLI: Curation Waiver Request"
on:
  push:
    branches: 
      - '**'
permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write # for uploading attestations.
  contents: read
  security-events: write # Required for uploading code scanning.
env:
  JF_RT_URL: "https://psazuse.jfrog.io"
  JOB_SUMMARY: false
  JFROG_CLI_LOG_LEVEL: DEBUG # DEBUG, INFO, WARN, ERROR
  DEFAULT_WORKSPACE: "${{github.workspace}}" 
  BUILD_ID: "${{github.run_number}}.0"
  BUILD_NAME: "cwr" # CWR - Curation Waiver Request 
  REPO_VIRTUAL: "cg-lab-npm" # "curation-blocked-npm-virtual"  # "curation-blocked-npm-remote" # "curation-blocked-npm-local"

jobs:
  caBlockerFail: 
    name: "CA fails if pkg blocked"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "${{env.DEFAULT_WORKSPACE}}"
    steps:
        - name: "Setup JFrog CLI"
          uses: jfrog/setup-jfrog-cli@v4
          id: jfrog-cli
          env:
            JF_URL: ${{env.JF_RT_URL}}
            JFROG_CLI_LOG_LEVEL: "DEBUG"
          with:
            version: latest 
            oidc-provider-name: ${{vars.JF_OIDC_PROVIDER_NAME}}
            disable-job-summary: ${{env.JOB_SUMMARY}}

        - name: Checkout
          uses: actions/checkout@v4

        - name: "Folder list"
          run: | 
              rm -rf node_modules package-lock.json
              tree .

        - name: "JF Show"
          run: | 
              jf c s

        - name: "Setup Summary"
          run: |
            echo "# :frog: Setup Summary :pushpin:" >> $GITHUB_STEP_SUMMARY
            echo " " >> $GITHUB_STEP_SUMMARY
            echo " " >> $GITHUB_STEP_SUMMARY
            echo " - Installed JFrog CLI [$(jf --version)](https://jfrog.com/getcli/) " >> $GITHUB_STEP_SUMMARY
            echo "    - $(jf --version) " >> $GITHUB_STEP_SUMMARY
            echo "    - $(npm -v) " >> $GITHUB_STEP_SUMMARY
            echo "    - $(node -v) " >> $GITHUB_STEP_SUMMARY
            echo " " >> $GITHUB_STEP_SUMMARY
            echo " " >> $GITHUB_STEP_SUMMARY
            echo " Curation Info:" >> $GITHUB_STEP_SUMMARY
            echo "    - Policy Name: Curation-blocked-remote " >> $GITHUB_STEP_SUMMARY
            echo "    - Repo-Virtual: ${{env.REPO_VIRTUAL}} " >> $GITHUB_STEP_SUMMARY   
            echo "    - Repo-remote: curation-blocked-npm-remote " >> $GITHUB_STEP_SUMMARY 

        - name: "Create NPM config"
          run: |
            jf npmc --repo-resolve=${{env.REPO_VIRTUAL}} --repo-deploy=${{env.REPO_VIRTUAL}}

        - name: "Curation-Audit"
          run: | 
            output=$(jf ca --format=table --threads=100) # Replace with actual command
            echo "$output"
            if echo "$output" | grep -q "blocked package"; then # Define your failure condition
              echo "::error::Build failed: Build contains blocked packages."
              exit 1
            fi

        - name: "NPM Install"
          run: |  
              jf npm install --build-name=${{env.BUILD_NAME}} --build-number=${{env.BUILD_ID}}

        - name: "Build-Info"
          run: |
            jf rt bag ${BUILD_NAME} ${BUILD_ID} 
            jf rt bce ${BUILD_NAME} ${BUILD_ID}
            jf rt bp ${BUILD_NAME} ${BUILD_ID}

  waiverPendingInfo: 
    name: "Waiver Pending info"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "${{env.DEFAULT_WORKSPACE}}"
    steps:
        - name: "Setup JFrog CLI"
          uses: jfrog/setup-jfrog-cli@v4
          id: jfrog-cli
          env:
            JF_URL: ${{env.JF_RT_URL}}
            JFROG_CLI_LOG_LEVEL: "DEBUG"
          with:
            version: latest 
            oidc-provider-name: ${{vars.JF_OIDC_PROVIDER_NAME}}
            disable-job-summary: ${{env.JOB_SUMMARY}}

        - name: Checkout
          uses: actions/checkout@v4

        - name: "Folder list"
          run: | 
              rm -rf node_modules package-lock.json
              tree .

        - name: "JF Show"
          run: | 
              jf c s

        - name: "Create NPM config"
          run: |
            jf npmc --repo-resolve=${{env.REPO_VIRTUAL}} --repo-deploy=${{env.REPO_VIRTUAL}}

        - name: "Curation-Audit"
          run: | 
            jf ca --format=table --threads=100
        
        - name: "Waiver pending info"
          env:
            CURL_URL: "${{env.JF_RT_URL}}/xray/ui/curation/waiver_requests?pkg_type=PyPI&status=pending&num_of_rows=100"
            RESP_JSON: "WAIVER_PENDING_RESP-${{env.BUILD_ID}}.json"
              # {
              #   "data": [
              #     {
              #         "id": 8,
              #         "created_at": "2025-05-14T21:13:39Z",
              #         "closed_at": "",
              #         "repo_key": "curation-blocked-remote",
              #         "pkg_type": "PyPI",
              #         "pkg_name": "s3transfer",
              #         "pkg_version": "0.12.0",
              #         "status": "pending",
              #         "decision_owners": [
              #             "admins"
              #         ],
              #         "requesters": [
              #             {
              #                 "user": "krishnam",
              #                 "email": "krishnam@jfrog.com",
              #                 "requested_at": "2025-05-22T15:34:19Z",
              #                 "justification": "May 22 curation request"
              #             }
              #         ],
              #         "policies": [
              #             {
              #                 "id": 41,
              #                 "name": "curation-waiver-request-policy",
              #                 "scope": "specific_repos",
              #                 "policy_action": "block",
              #                 "condition_id": "34",
              #                 "condition_name": "block all",
              #                 "condition_category": "security",
              #                 "can_approve": true,
              #                 "pkg_types_include": [
              #                     "curation-blocked-remote",
              #                     "krishnam-npm-remote"
              #                 ],
              #                 "repo_include": [
              #                     "curation-blocked-remote",
              #                     "krishnam-npm-remote"
              #                 ],
              #                 "decision_owners": [
              #                     "admins"
              #                 ]
              #             }
              #         ]
              #     } 
              #   ] 
              # }
          run: |
            WAIVER_PENDING_RESP=$(curl -v -G ${{env.CURL_URL}} -H 'Content-Type:  application/json' -H "Authorization: Bearer ${{steps.jfrog-cli.outputs.oidc-token}}")
            echo $WAIVER_PENDING_RESP > ${{env.RESP_JSON}}
            cat ${{env.RESP_JSON}}

            echo "# :frog: Waiver Pending Summary :pushpin:" >> $GITHUB_STEP_SUMMARY
            echo " " >> $GITHUB_STEP_SUMMARY
            echo " " >> $GITHUB_STEP_SUMMARY
            echo " - Installed JFrog CLI [$(jf --version)](https://jfrog.com/getcli/) " >> $GITHUB_STEP_SUMMARY
            echo "    - $(jf --version) " >> $GITHUB_STEP_SUMMARY
            echo "    - $(npm -v) " >> $GITHUB_STEP_SUMMARY
            echo "    - $(node -v) " >> $GITHUB_STEP_SUMMARY
            echo " " >> $GITHUB_STEP_SUMMARY
            echo " Curation Info:" >> $GITHUB_STEP_SUMMARY
            echo "    - Policy Name: Curation-blocked-remote " >> $GITHUB_STEP_SUMMARY
            echo "    - Repo-Virtual: ${{env.REPO_VIRTUAL}} " >> $GITHUB_STEP_SUMMARY   
            echo "    - Repo-remote: curation-blocked-npm-remote " >> $GITHUB_STEP_SUMMARY 
            echo " " >> $GITHUB_STEP_SUMMARY
            echo " Waiver Pending Info:" >> $GITHUB_STEP_SUMMARY
            echo " | Waiver ID | Package Name | Package version | " >> $GITHUB_STEP_SUMMARY
            echo " | :--- | :--- | :--- | " >> $GITHUB_STEP_SUMMARY
              
            items=$(echo "$WAIVER_PENDING_RESP" | jq -c -r '.data[]')
            echo ${items}
            for item in ${items[@]}; do
              waiver_id=$(echo $item | jq -r '.id')
              waiver_pkg_name=$(echo $item | jq -r '.pkg_name')
              waiver_pkg_ver=$(echo $item | jq -r '.pkg_version')

              echo "| ${waiver_id} | ${waiver_pkg_name} | ${waiver_pkg_ver} |" >> $GITHUB_STEP_SUMMARY
            done
            echo " " >> $GITHUB_STEP_SUMMARY

        - name: "Exit"
          run: |  
            exit 1

        - name: "NPM Install"
          run: |  
              jf npm install --build-name=${{env.BUILD_NAME}} --build-number=${{env.BUILD_ID}}

        - name: "Build-Info"
          run: |
            jf rt bag ${BUILD_NAME} ${BUILD_ID} 
            jf rt bce ${BUILD_NAME} ${BUILD_ID}
            jf rt bp ${BUILD_NAME} ${BUILD_ID}